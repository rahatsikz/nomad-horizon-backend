// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String
  email     String   @unique
  password  String
  role      Role     @default(customer)
  contactNo String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews       Review[]
  bookings      Booking[]
  notifications Notification[]

  @@map("users")
}

model Service {
  id          String          @id @default(uuid())
  serviceName String
  content     String
  image       String
  status      Status          @default(available)
  price       Int
  category    ServiceCategory
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  reviews     Review[]
  bookings    Booking[]
  schedules   Schedule[]

  @@map("services")
}

model Schedule {
  id                  String     @id @default(uuid())
  startTime           String
  endTime             String
  eachSessionDuration Int
  daysOfWeek          DaysOfWeek
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  @@map("schedules")
}

model Booking {
  id            String        @id @default(uuid())
  date          DateTime
  startTime     String
  endTime       String
  bookingStatus BookingStatus @default(processing)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("bookings")
}

model Review {
  id        String   @id @default(uuid())
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Notification {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Blog {
  id             String   @id @default(uuid())
  title          String
  content        String
  author         String
  image          String
  showOnHomepage Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("blogs")
}

enum Role {
  customer
  admin
  superadmin
}

enum Status {
  available
  upcoming
}

enum ServiceCategory {
  technical
  lifestyle
}

enum BookingStatus {
  processing
  confirmed
  rejected
  adjusted
  completed
  cancelled
}

enum DaysOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
